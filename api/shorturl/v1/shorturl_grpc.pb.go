// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.26.1
// source: shorturl/v1/shorturl.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Shorturl_GetShorturl_FullMethodName = "/shorturl.v1.Shorturl/GetShorturl"
	Shorturl_GetLongurl_FullMethodName  = "/shorturl.v1.Shorturl/GetLongurl"
)

// ShorturlClient is the client API for Shorturl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The greeting service definition.
type ShorturlClient interface {
	// 获取短链接
	GetShorturl(ctx context.Context, in *GetShorturlRequest, opts ...grpc.CallOption) (*GetShorturlReply, error)
	// 获取长链接
	GetLongurl(ctx context.Context, in *GetLongurlRequest, opts ...grpc.CallOption) (*GetLongurlReply, error)
}

type shorturlClient struct {
	cc grpc.ClientConnInterface
}

func NewShorturlClient(cc grpc.ClientConnInterface) ShorturlClient {
	return &shorturlClient{cc}
}

func (c *shorturlClient) GetShorturl(ctx context.Context, in *GetShorturlRequest, opts ...grpc.CallOption) (*GetShorturlReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetShorturlReply)
	err := c.cc.Invoke(ctx, Shorturl_GetShorturl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shorturlClient) GetLongurl(ctx context.Context, in *GetLongurlRequest, opts ...grpc.CallOption) (*GetLongurlReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLongurlReply)
	err := c.cc.Invoke(ctx, Shorturl_GetLongurl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShorturlServer is the server API for Shorturl service.
// All implementations must embed UnimplementedShorturlServer
// for forward compatibility
//
// The greeting service definition.
type ShorturlServer interface {
	// 获取短链接
	GetShorturl(context.Context, *GetShorturlRequest) (*GetShorturlReply, error)
	// 获取长链接
	GetLongurl(context.Context, *GetLongurlRequest) (*GetLongurlReply, error)
	mustEmbedUnimplementedShorturlServer()
}

// UnimplementedShorturlServer must be embedded to have forward compatible implementations.
type UnimplementedShorturlServer struct {
}

func (UnimplementedShorturlServer) GetShorturl(context.Context, *GetShorturlRequest) (*GetShorturlReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShorturl not implemented")
}
func (UnimplementedShorturlServer) GetLongurl(context.Context, *GetLongurlRequest) (*GetLongurlReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLongurl not implemented")
}
func (UnimplementedShorturlServer) mustEmbedUnimplementedShorturlServer() {}

// UnsafeShorturlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShorturlServer will
// result in compilation errors.
type UnsafeShorturlServer interface {
	mustEmbedUnimplementedShorturlServer()
}

func RegisterShorturlServer(s grpc.ServiceRegistrar, srv ShorturlServer) {
	s.RegisterService(&Shorturl_ServiceDesc, srv)
}

func _Shorturl_GetShorturl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShorturlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShorturlServer).GetShorturl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shorturl_GetShorturl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShorturlServer).GetShorturl(ctx, req.(*GetShorturlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shorturl_GetLongurl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLongurlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShorturlServer).GetLongurl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shorturl_GetLongurl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShorturlServer).GetLongurl(ctx, req.(*GetLongurlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Shorturl_ServiceDesc is the grpc.ServiceDesc for Shorturl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shorturl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shorturl.v1.Shorturl",
	HandlerType: (*ShorturlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetShorturl",
			Handler:    _Shorturl_GetShorturl_Handler,
		},
		{
			MethodName: "GetLongurl",
			Handler:    _Shorturl_GetLongurl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shorturl/v1/shorturl.proto",
}
