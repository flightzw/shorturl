// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.26.1
// source: shorturl/v1/shorturl.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationShorturlServiceGetLongurl = "/shorturl.v1.ShorturlService/GetLongurl"
const OperationShorturlServiceGetShorturl = "/shorturl.v1.ShorturlService/GetShorturl"

type ShorturlServiceHTTPServer interface {
	// GetLongurl 获取长链接
	GetLongurl(context.Context, *GetLongurlRequest) (*GetLongurlReply, error)
	// GetShorturl 获取短链接
	GetShorturl(context.Context, *GetShorturlRequest) (*GetShorturlReply, error)
}

func RegisterShorturlServiceHTTPServer(s *http.Server, srv ShorturlServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/shorturls/geturl", _ShorturlService_GetShorturl0_HTTP_Handler(srv))
	r.GET("/shorturls/{code}", _ShorturlService_GetLongurl0_HTTP_Handler(srv))
}

func _ShorturlService_GetShorturl0_HTTP_Handler(srv ShorturlServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetShorturlRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShorturlServiceGetShorturl)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetShorturl(ctx, req.(*GetShorturlRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetShorturlReply)
		return ctx.Result(200, reply)
	}
}

func _ShorturlService_GetLongurl0_HTTP_Handler(srv ShorturlServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetLongurlRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShorturlServiceGetLongurl)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetLongurl(ctx, req.(*GetLongurlRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetLongurlReply)
		return ctx.Result(200, reply)
	}
}

type ShorturlServiceHTTPClient interface {
	GetLongurl(ctx context.Context, req *GetLongurlRequest, opts ...http.CallOption) (rsp *GetLongurlReply, err error)
	GetShorturl(ctx context.Context, req *GetShorturlRequest, opts ...http.CallOption) (rsp *GetShorturlReply, err error)
}

type ShorturlServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewShorturlServiceHTTPClient(client *http.Client) ShorturlServiceHTTPClient {
	return &ShorturlServiceHTTPClientImpl{client}
}

func (c *ShorturlServiceHTTPClientImpl) GetLongurl(ctx context.Context, in *GetLongurlRequest, opts ...http.CallOption) (*GetLongurlReply, error) {
	var out GetLongurlReply
	pattern := "/shorturls/{code}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShorturlServiceGetLongurl))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ShorturlServiceHTTPClientImpl) GetShorturl(ctx context.Context, in *GetShorturlRequest, opts ...http.CallOption) (*GetShorturlReply, error) {
	var out GetShorturlReply
	pattern := "/shorturls/geturl"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationShorturlServiceGetShorturl))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
